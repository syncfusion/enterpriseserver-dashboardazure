﻿@{
    Layout = null;
    ViewBag.Title = ViewBag.ItemName + " - [[[View Dashboard]]] -" + GlobalAppSettings.SystemSettings.OrganizationName;
    var baseUrl = ViewBag.BaseUrl;
    var dashboardServiceUrl = GlobalAppSettings.SystemSettings.DashboardServiceUrl;
    var itemLocation = ViewBag.ItemLocation as string;
    itemLocation = itemLocation.Replace("\\", "\\\\");
    var enableComment = "false";
    ItemDetail itemDetail = new ItemDetail();
    itemDetail = ViewBag.itemDetail;
    var itemId = ViewBag.ItemId;
    var parentId = ViewBag.ParentId;
    var isUserAuthenticated = "false";
    var isPublic = GlobalAppSettings.SystemSettings.IsMarkItemsPublic && itemDetail.IsPublic ? "true" : "false";
    var _itemId = ViewBag.IsMultiDashboard ? parentId : itemId;
    ViewBag.DateFormat = GlobalAppSettings.SystemSettings.DateFormat;
    ViewBag.TimeFormat = GlobalAppSettings.SystemSettings.TimeFormat ? "HH:mm" : "hh:mm tt";
    var accessToken = ViewBag.AccessToken;
    var iframeLoaded = "false";
    var organizationName = GlobalAppSettings.SystemSettings.OrganizationName;
    var ogpImage = string.Empty;
    if (GlobalAppSettings.SystemSettings.StorageType == (int)StorageType.AzureBlob)
    {
        ogpImage = GlobalAppSettings.AzureBlob.AzureBlobStorageUri + "/" + GlobalAppSettings.AzureBlob.AzureBlobStorageContainerName + "/" + GlobalAppSettings.GetStorageMode() + "/Content/Images/Application/" + GlobalAppSettings.SystemSettings.LoginLogo;
    }
    else
    {
        ogpImage = baseUrl + "/Content/Images/Application/" + GlobalAppSettings.SystemSettings.LoginLogo;
    }
    var ogpDescription = string.IsNullOrEmpty(itemDetail.Description)
        ? organizationName + "Application provides a web interface to manage and share dashboards, to easily collaborate with other users by commenting on dashboards, to receive email notifications when specific values reach a threshold in data notification, and to track important data from multiple dashboards by pinning the desired widgets to a home screen."
        : itemDetail.Description;
    var isUnlisted = itemDetail.IsUnlisted ? "true" : "false";
    var unlistedcode = itemDetail.UnlistedCode;
    var isOwner = Convert.ToBoolean(itemDetail.CreatedById == ((HttpContext.Current.User as ServerPrincipal) != null ? (HttpContext.Current.User as ServerPrincipal).UserId : 0)) ? "true" : "false";
}

<!DOCTYPE html>
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta property="og:title" content="@organizationName | @itemDetail.Name" />
    <meta property="og:description" content="@ogpDescription" />
    <meta property="og:image" content="@ogpImage" />
    <meta property="og:url" content="@GlobalAppSettings.SystemSettings.BaseUrl" />
    <meta property="og:type" content="website" />
    <meta property="og:site_name" content="@organizationName" />
    <meta property="twitter:title" content="@organizationName | @itemDetail.Name" />
    <meta property="twitter:url" content="@GlobalAppSettings.SystemSettings.BaseUrl" />
    <meta property="twitter:card" content="summary" />
    <meta property="twitter:description" content="@ogpDescription" />
    <meta property="twitter:image" content="@ogpImage" />
    @if (GlobalAppSettings.SystemSettings.StorageType == (int)StorageType.AzureBlob)
    {
        <link rel="icon" href="@GlobalAppSettings.AzureBlob.AzureBlobStorageUri/@GlobalAppSettings.AzureBlob.AzureBlobStorageContainerName/@GlobalAppSettings.GetStorageMode()/Content/Images/Application/@GlobalAppSettings.SystemSettings.FavIcon" onerror="if (this.href != '~/Content/Images/Application/Favicon.png') this.href = '~/Content/Images/Application/Favicon.png';" />
    }
    else
    {
        <link rel="icon" href="~/Content/Images/Application/@GlobalAppSettings.SystemSettings.FavIcon" onerror="if (this.href != '~/Content/Images/Application/Favicon.png') this.href = '~/Content/Images/Application/Favicon.png';" />
    }

    <title>@ViewBag.Title</title>
    @Styles.Render("~/styles/file-render-ej", DeviceDetection.IsMobile ? "~/styles/file-render-dashboard-mobile" : "~/styles/file-render-dashboard")
    <script>window.destroyAll = function () { try { ej.widget.destroyAll($('.e-js').off()); } catch (e) { } $(document.body).html('-'); CollectGarbage(); };</script>
    @Scripts.Render(DeviceDetection.IsMobile ? "~/scripts/dashboard-render-mobile" : "~/scripts/dashboard-render", "~/scripts/dashboard-render-ejviewer", "~/scripts/dashboard-render-ejvisualizationcontrols", "~/scripts/dashboard-render-ejchart")

    <style>
        html {
            height: 100%;
        }

        #dashboard{
            margin-right: 40px;
        }

         #dashboard_WaitingPopup{
             height: 100% !important;
             width: 100% !important;
             background-color: #fff !important;
         }
        #dashboard_WaitingPopup .e-image {
            background: url('@Url.Content("~/Content/Images/waitingpopup.gif")') no-repeat scroll 0px 18px transparent;
            top : 350px !important;
        }
        .icon {
            text-align: center;
        }
        .e-dbrd-banner-text-icon{
            font-size: 12px;
            font-family: 'roboto' !important;
        }
    </style>

    <script>
    var ReportName = "";
    var itemViewShareIframeUrl = "@Url.Action("shareItemView", "items")";
    var favoriteItemUrl = "@Url.Action("MakeFavorite", "Items")";
    var addViewUrl = "@Url.Action("onfiltersave", "DashboardViews")";
    var getSavedViewUrl = "@Url.Action("GetViews", "DashboardViews")";
    var getViewParameterUrl = "@Url.Action("GetDashboardViewParameter", "DashboardViews")";
    var deleteViewUrl = "@Url.Action("DeleteView", "DashboardViews")";
    var updateViewUrl = "@Url.Action("UpdateView", "DashboardViews")";
    var pinWidgetToHomepageUrl = "@Url.Action("PinWidgetToHomepage", "Homepages")";
    var saveViewPopup = "@Url.Action("SaveView", "DashboardViews")";
    var commentPageUrl = "@Url.Action("CommentPartialView", "Comments")";
    var Commentswidgets = "@Url.Action("WidgetCommentPartialView", "Comments")";
    var addHomepageUrl = "@Url.Action("addhomepage", "homepages")";
        var checkHomepageNameExistUrl = "@Url.Action("checkhomepagenameexist", "homepages")";
     var isNewViewerModel = "@GlobalAppSettings.SystemSettings.IsNewViewerModel";
        var pinDashboardUrl = "@Url.Action("pinitemtohomepage", "homepages")";
        var isUnlisted = @itemDetail.IsUnlisted.ToString().ToLower();
        var unlistedCode = "@itemDetail.UnlistedCode";
        var isOwner = @isOwner;
    var viewUrl = "@Url.Action("Index", "FileRender")";
        var commentSettings = {commentSettings: {
            isDashboardCommented: @Html.Raw(ViewBag.IsDashboardCommented),
            widgets: [@Html.Raw(ViewBag.CommentedWidgets)]
        }};
        function loadPopup() {
            $("#dashboard").ejWaitingPopup();
            $("#dashboard").ejWaitingPopup("show");
            window.location.href = window.location.href.replace(window.location.pathname + window.location.search, "");
        }
        function CommentImageDialogClose() {
            $("#commentImage_popup").ejDialog("close");
            $("#commentImage_popup_image").attr('src', "");
        }
    </script>

    @{
        var userId = 0;
        var userName = "";
        if (HttpContext.Current.Request.IsAuthenticated && HttpContext.Current.User != null && HttpContext.Current.User.Identity != null && HttpContext.Current.User.Identity.IsAuthenticated)
        {
            enableComment = ViewBag.IsSlideshow ? "false" : "true";
            isUserAuthenticated = "true";
            userId = (HttpContext.Current.User as ServerPrincipal).UserId;
            userName = (HttpContext.Current.User as ServerPrincipal).UserName;
        }
        else
        {
            enableComment = "false";
            isUserAuthenticated = "false";
        }
    }
</head>

<body style="width: 100%; height: 100%; overflow: hidden" id="body">
    <input id="favorite_Item" type="hidden" data-item-id="@ViewBag.ItemId" data-parent-id="@ViewBag.ParentId" data-favorite-value="@ViewBag.IsFavorite">
    <input id="dashboard_Comment" type="hidden" data-item-id="@ViewBag.ItemId">
    <input id="isMultiDashboard" type="hidden" data-item-id="@ViewBag.IsMultiDashboard" data-parent-id="@ViewBag.ParentId">
    <input id="is_mobile" type="hidden" value="@DeviceDetection.IsMobile.ToString().ToLower()">
    <input id="comment_Type" type="hidden" data-item-id="@ViewBag.DataItemId" data-item-type="@ViewBag.ItemType">
    <input id="isunlisted" type="hidden" value="@isUnlisted"/>
    
    <div id="dashboard" style="height: 100%;"></div>
    @if (DeviceDetection.IsMobile)
    {
        <nav id="server-mobile-navbar" class="navbar navbar-inverse">
            <div class="container-fluid">
                <ul class="nav navbar-nav col-xs-12 no-padding no-margin">
                    <li class="col-xs-3 icon">
                        <a href="javascript:void(0)" class="su su-nav-dashboard active"></a>
                    </li>
                    <li class="col-xs-3 icon" id="comment-li">
                        @if (ViewBag.IsDashboardCommented == "true")
                        {
                            <a href="javascript:void(0)" class="su su-with-comment server-comment"></a>
                        }
                        else
                        {
                            <a href="javascript:void(0)" class="su su-without-comment server-comment"></a>
                        }
                    </li>
                    <li class="col-xs-3 icon">
                        <a href="javascript:void(0)" class="su su-filter server-item-view"></a>
                    </li>
                    <li class="col-xs-3 icon" id="view-li">
                        <a href="javascript:void(0)" class="su-view"></a>
                    </li>
                </ul>
            </div>
        </nav>
    }
    @Html.Partial("_DashboardViews")

    @if (HttpContext.Current.Request.IsAuthenticated && HttpContext.Current.User != null && HttpContext.Current.User.Identity != null && HttpContext.Current.User.Identity.IsAuthenticated)
    {
        <div id="commentModuleContainer" class="displayNone" style="background-image: url('@Url.Content("~/Content/Images/waitingpopup.gif")'); background-color: #fff; background-repeat: no-repeat; background-position: 50% 50%;">
            <iframe id="commentModuleContainer_iframe" class="comment-popup-frame" data-item-id="@ViewBag.ItemId"   style="height: 100%; width: 100%;"></iframe>
        </div>
        <iframe id="delete_popup_iframe" class="comment-popup-frame displayNone"  allowtransparency="true" style="position: absolute;"></iframe>

        <div id="widgetCommentModuleContainer" class="displayNone" style="background-image: url('@Url.Content("~/Content/Images/waitingpopup.gif")'); background-color: #fff; background-repeat: no-repeat; background-position: 50% 50%; z-index: 1000001;">
            <iframe id="widgetCommentModuleContainer_iframe" class="comment-popup-frame"  style="height: 100%; width: 100%;"></iframe>
        </div>
    }
    <div id="viewShare_popup" class="col-md-12 DisplayNone">
        <div id="sharepopup_wrapper_WaitingPopup" class="e-waitpopup-sharepopup">
            <span class="e-image" style="top: 161px;"></span>
        </div>
        <iframe id="viewShare_popup_iframe" class="EditIframe"></iframe>
    </div>
    <div class="ViewShare_popup_shadow"></div>
    @* ******************* Please add new iframes below this line *************** *@
    <div id="commentImage_popup" class="col-md-12 no-padding hidden">
        <div class="col-lg-12 no-padding" id="PopupContainer">
            <div class="col-md-12">
                <div class="col-xs-12 no-padding" style="float:right">
                    <a href="javascript:void(0);" onclick="CommentImageDialogClose()" class="PopupClose closePopupImage"><span class="su su-close"></span></a>
                </div>
            </div>
            <div class="dialogBody col-xs-12 no-padding">
                <img id="commentImage_popup_image" src="" style="width: 100%;">
            </div>
        </div>
    </div>
    <div id="pin-widget-popup" data-item-id="@(parentId != null ? parentId : itemId)" data-widget-id="" data-widget-name="">
        <iframe id="pin-widget-popup-iframe" class="" style="height: 100%; width: 100%;"></iframe>
    </div>
    <div id="save-view-popup" data-item-id="@(parentId != null ? parentId : itemId)" data-widget-id="" data-widget-name="">
        <iframe id="save-view-popup-iframe" class="" style="height: 100%; width: 100%;"></iframe>
    </div>
    <div id="dashboard-homepage-popup" data-item-id="@(parentId != null ? parentId : itemId)" class="no-padding">
        <form id="dashboard-homepage-form">
            <div class="col-md-12 header-menu">
                <span class="su su-pin head-icon"></span>
                <span class="popup-title">[[[Set Dashboard as Homepage]]]</span>
                <a href="javascript:void(0);" title="[[[Close]]]" class="popup-close" onclick="closeDashboardHomepagePopup()"><span class="su su-close"></span></a>
                <div id="dashboard-homepage-name"><div id="sub-title" data-toggle="tooltip" data-placement="bottom" data-original-title="">[[[Name the homepage and choose whether it should be shown by default]]]</div></div>
            </div>
            <div id="dashboard-homepage-container">
                <div id="homepage-name-container" class="col-xs-12">
                    @Html.Label("widget-label", "[[[Homepage name]]]", new { @class = "app-textbox-label homepage-name-label col-xs-4" })
                    <div id="homepage-input" class="col-xs-4">
                        <input type="text" id="homepage-name" name="dashboardhomepagename" class="form-control" maxlength="255" autofocus />
                        <span class="validation-errors"></span>
                    </div>
                </div>
                <div class="col-xs-12">
                    @Html.Label("makedefault", "[[[Make default]]]", new { @class = "app-textbox-label col-xs-4", @id = "make-default-label" })
                    <div class="col-xs-4 makedefault switch-align">
                        <span class="material-switch text-left">
                            <input type="checkbox" id="makedefault" name="make-default" />
                            <label for="makedefault" class="label-primary"></label>
                        </span>
                    </div>
                </div>
                <div class="col-xs-12" id="filter-container">
                    @Html.Label("keepfilter", "[[[Keep filters]]]", new { @class = "app-textbox-label col-xs-4", @id = "keep-filter-label" })
                    <div class="col-xs-4 keepfilter switch-align">
                        <span class="material-switch text-left">
                            <input type="checkbox" id="keepfilter" name="keep-filter" checked />
                            <label for="keepfilter" class="label-primary"></label>
                        </span>
                    </div>
                    <div id="info-tag">
                        <span id="filter-info" class="su su-info info-popup" data-toggle="popover" data-placement="top" data-content='[[[When "Keep filters" is switched on, the dashboard will be pinned to the homepage along with the applied filters.]]]'></span>
                    </div>
                </div>
                <div id="dashboard-homepage-button">
                    <div id="button-container">
                        <input type="button" id="dashboard-homepage-save-button" class="btn primary-button" value="[[[Save]]]">
                        <input type="button" id="dashboard-homepage-cancel-button" class="btn secondary-button" value="[[[Cancel]]]" onclick="closeDashboardHomepagePopup()">
                    </div>
                </div>
            </div>
        </form>
    </div>
    <div id="success-alert">
        <div id="image-container">
            <div class="image-holder">
                <span class="su su-tick" alt="Success Icon"></span>
            </div>
        </div>
        <div id="message">
            <h1 id="message-header"></h1>
            <span id="message-content"></span>
        </div>
        <div class="close-div">
            <span id="close-content">[[[Close]]]</span>
        </div>
    </div>
    <div id="warning-alert">
        <div id="image-container">
            <span class="su su-warning-alt" alt="Warning Icon"></span>
        </div>
        <div id="message">
            <h1 id="message-header"></h1>
            <span id="message-content"></span>
        </div>
        <div class="close-div">
            <span id="close-content">[[[Close]]]</span>
        </div>
    </div>   
    @if (!ViewBag.IsSlideshow)
    {
        @Html.Partial("../Items/_GetLink")
    }
</body>

<script type="text/javascript">

    var userId = "@userId";
    var userName = "@userName";
    var viewId = "@ViewBag.ViewId";
    var item_Id = "@ViewBag.ItemId";
    var isMultiDashboard = "@ViewBag.IsMultiDashboard";
    var childDesignerId = "@ViewBag.ChildDesignerId";
    var enableComment = "@enableComment";
    var isUserAuthenticated="@isUserAuthenticated";
    var pageurl = "@HttpContext.Current.Request.Url.LocalPath";
    var baseUrl = "@GlobalAppSettings.SystemSettings.BaseUrl";
    var dashboardServiceUrl = "@GlobalAppSettings.SystemSettings.DashboardServiceUrl";
    var token = "@accessToken";
    var enableFavoriteSettings = (isUnlisted ) ?   (isOwner ? @enableComment : false) : @enableComment;
    var parentRefUrl = (window.location != window.parent.location) ? document.referrer : document.location.href.replace(document.location.pathname + document.location.search, "");
    if(parentRefUrl == ""){
        var parentUrl = "";
    }
    else {
        var parentUrl = parentRefUrl.match(/:\/\/(.[^/]+)/)[1];
    }
    var iframeRefUrl=window.location.href;
    var iframeUrl=iframeRefUrl.match(/:\/\/(.[^/]+)/)[1];
    var canEdit = "@itemDetail.CanWrite";
    var showMyDashboards = "@ViewBag.ShowMyDashboards";
    var isSlideshow = "@ViewBag.IsSlideshow".toLowerCase() == "true" ? true : false;

    function IframeLoad() {
        if(iframeUrl == parentUrl)
        {
            if(window.parent.$("#item-viewer").data("ejWaitingPopup") != undefined) {
                window.parent.$("#item-viewer").ejWaitingPopup("hide");
            }
        }
    }
    $(document).ready(function () {
        if (document.addEventListener) {
            document.addEventListener('webkitfullscreenchange', fullscreenExitHandler, false);
            document.addEventListener('mozfullscreenchange', fullscreenExitHandler, false);
            document.addEventListener('fullscreenchange', fullscreenExitHandler, false);
            document.addEventListener('MSFullscreenChange', fullscreenExitHandler, false);
        }
        if (isSlideshow) {
            //Remove side bar
            $("ul.options").addClass("displayNone");
            $("#filter-view").css("display", "none");
            $("#dashboard-view-toogle").css("display", "none");
            $("#dashboard").css("margin-right", "0px");
            $("#dashboard").css("width", $(window).width() + "px");
        }
        if (!isSlideshow && $("#is_mobile").val() != "true" )  {
            //display side bar
            $("ul.options").css("display", "block");          
        }
		IframeLoad();

        $(window).resize(function () {
            ResizePopup();
            if (isSlideshow) {
                $("#dashboard").css("height", $(window).height() + "px");
                $("#dashboard").css("width", $(window).width() + "px");
            } else {
                if ($("#is_mobile").val() == "true") {
                    $("#dashboard").css("height", $(window).height() - 50 + "px");
                }
                setWidth();
            }
        });

        $(window).bind('popstate',
            function(e) {
                applyFilter();
            });

        window.addEventListener('message', receiveMessage, false);
        function receiveMessage(event) {
            if (event.data === 'filter') {
                applyFilter();
            }
        }

        var waitingpopup = $("#dashboard-view-toogle").ejWaitingPopup();
        dashboardviewerObj = $('#dashboard').data("ejDashboardViewer");
        window.onresize = SavedViewHeight;
        var windowwidth = $(window).width();

        var te = "@Html.Raw(itemLocation)";
        ReportName = "@ViewBag.ItemName";
        var ReportDescription = "@ViewBag.ItemDescription";
        var browser = ej.browserInfo();

        $("#pin-widget-popup").ejDialog({
            width: "400px",
            height: "360px",
            showOnInit: false,
            allowDraggable: true,
            enableResize: false,
            title: "[[[Pin Item to the Homepage]]]",
            enableModal: true,
            showHeader: false
        });
        $("#pin-widget-popup_wrapper").ejWaitingPopup();

        $("#dashboard-homepage-popup").ejDialog({
            width: "450px",
            height: "306px",
            showOnInit: false,
            allowDraggable: true,
            enableResize: false,
            title: "Set Dashboard as Homepage",
            enableModal: true,
            showHeader: false
        });
        $("#dashboard-homepage-popup_wrapper").ejWaitingPopup();

        if (browser != null && browser.name === "msie" && parseFloat(browser.version) <= 8.0) {
            var divString = '<div style="top:20%;width:575px;margin:0px auto;position:relative;text-align:center">' +
                '<div style="padding:35px 68px 35px 68px;" class="e-dbrd-control-container">' +
                '<p style="font-size:18px;font-weight:bold">[[[Internet Explorer 8 and Internet Explorer 11 in Enterprise Mode are not supported]]]</p>' +
                '<p style="font-size:10px">[[[Please upgrade to a newer browser if you are using IE8 or turn off Enterprise Mode if you are using IE11 in Enterprise Mode.]]]</p>' +
                '<p style="text-align:left;margin-top:20px">[[[Supported Browsers:]]]</p><div class="alert-ie">' +
                '<div><span><img  src="@Url.Content("~/api/themes/common-images/IE.png")" /></span><p>Internet Explorer 9+</p> </div> ' +
                '<div><span><img  src="@Url.Content("~/api/themes/common-images/Edge.png")" /> </span><p>Microsoft Edge</p></div>' +
                '<div><span><img  src="@Url.Content("~/api/themes/common-images/Firefox.png")" /></span><p>Mozilla Firefox 22+</p></div>' +
                '<div><span><img  src="@Url.Content("~/api/themes/common-images/Chrome.png")" /></span><p>Chrome 17+</p></div>' +
                '<div><span><img  src="@Url.Content("~/api/themes/common-images/Opera.png")" /></span><p>Opera 12+</p></div>' +
                '<div><span><img  src="@Url.Content("~/api/themes/common-images/Safari.png")" /></span><p>Safari 5+</p></div></div></div>'
            var body = document.getElementById("dashboard");
            body.style.backgroundColor = "white";
            body.innerHTML = divString;
        } else {
            if (viewId != null && viewId != "")
            {
                var viewName = "";
                var canUpdate = false;
                var link = "";
                $.ajax({
                    type: "POST",
                    url: getViewParameterUrl,
                    data: { ViewId: viewId, UserId: userId, UserName: userName, itemid: item_Id, IsMultiDashboard: isMultiDashboard, parentDashboardId: "@parentId" },
                    success: function (data) {
                        var viewDetails;
                        if (data.viewDetails != null && data.viewDetails != '') {
                            if (data.isPublic|| data.isUnlisted) {
                                viewDetails = data.viewDetails;
                                viewName = viewDetails.ViewName;
                                parameter = decodeURI(viewDetails.QueryString);
                                canUpdate = viewDetails.CanEdit;
                            } else {
                                viewDetails = JSON.parse(data.viewDetails);
                                viewName = viewDetails.ViewName;
                                parameter = decodeURI(viewDetails.QueryString);
                                canUpdate = viewDetails.CanEdit;
                            }
                        }
                        else {
                            window.location.href = window.location.href.replace(window.location.search, "");
                        }
                        $("#dashboard").ejDashboardViewer({
                            accessToken: token,
                            actionBegin: "fnOnDashboardBegin",
                            serviceUrl: "@dashboardServiceUrl",
                            dashboardPath: te,
                            reportName: ReportName,
                            enableDashboardScaling: isSlideshow, // Enable scaling when dashboards rendering from slideshow
                            reportDescription: ReportDescription,
                            showGetLinkIcon: !isSlideshow,
                            enableExport: true,
                            enablePrint: false,
                            enableFilterOverview: !isSlideshow,
                            localeSettings: {
                                resourcePath: "",
                                culture: "@ViewBag.Culture"
                              },
                            interactionSettings: {
                                allowHistoryMaintenance: true,
                                handleHistoryEvent: false
                            },
                            _selectedTabGuid : childDesignerId,
                            tabActive: function (args) {
                                if (isSlideshow) {
                                    return;
                                }

                                $("#dashboard").data("ejDashboardViewer").model.dashboardCreated = "";
                                item_Id = $("#dashboard").data("ejDashboardViewer")._getCurrentDashboardGuid();
                                $("#dashboard_Comment").attr("data-item-id", item_Id);
                                $("#favorite_Item").attr("data-item-id", item_Id);
                                $("#favorite_Item").attr("data-favorite-value", "false");
                                if ($("#comments").hasClass('active')) {
                                    var itemId = $("#dashboard_Comment").attr("data-item-id");
                                    window.frames[0].GetAllComments(itemId, "dashboard", itemId, "desc", isMultiDashboard);
                                }
                                resetViewPanel();
                                filterView();
                                $.ajax({
                                    type: "POST",
                                    url: "@Url.Action("GetCommentedWidgets", "DashboardViews")",
                                    data: {
                                        designerId: item_Id,
                                        parentId : $("#favorite_Item").attr("data-parent-id")
                                    },
                                    success: function(data) {
                                        var commentObj = { isDashboardCommented: data.IsDashboardCommented.toLowerCase() == "true", isWidgetCommented: true, widgets: data.Result };
                                        if(data.IsDashboardCommented.toLowerCase() == "true")
                                        {
                                            parent.$("ul.options li#comments span.su-without-comment").addClass("su-with-comment").removeClass("su-without-comment");
                                        }
                                        else{
                                            parent.$("ul.options li#comments span.su-with-comment").addClass("su-without-comment").removeClass("su-with-comment");
                                        }
                                        $("#dashboard").ejDashboardViewer("instance").applyComments(commentObj);
                                        $("#dashboard").ejDashboardViewer("instance").option("favoriteSettings.isFavorite", data.IsDashboardFavorite.toLowerCase() == "true");
                                        $("#favorite_Item").attr("data-favorite-value", data.IsDashboardFavorite.toLowerCase());
                                        $('#dashboard').data("ejDashboardViewer").model.filterOverviewSettings.viewName = null;
                                        $('#dashboard').data("ejDashboardViewer").model.filterOverviewSettings.viewId = null;
                                    }
                                });

                                var currentUrl = parent.$("#current-url").attr("data-url");
                                var tabName = $("#dashboard").data("ejDashboardViewer").getCurrentTab().tabName;
                                var stateObj = window.top.history.state;
                                if(parent.window.innerWidth >= 1041 && history.pushState != undefined) {
                                    if (currentUrl != undefined) {
                                        var currentQuery = getQueryWithoutViewCommentTab(parent.window.location.search.substring(1));
                                        window.top.history.replaceState(stateObj, "DashboardViewer", parent.window.location.pathname + currentQuery + "&tab=" + tabName);
                                    } else {
                                        var currentQuery = getQueryWithoutViewCommentTab(window.location.search.substring(1));
                                        if(currentQuery === ""){
                                            window.top.history.replaceState(stateObj, "DashboardViewer", window.location.pathname + "?tab=" + tabName);
                                        }
                                        else{
                                            window.top.history.replaceState(stateObj, "DashboardViewer", window.location.pathname + currentQuery +"&tab=" + tabName);
                                        }
                                    }
                                }
                            },
                            onFilterOverviewUpdated: "onFilterOverviewUpdated",
                            filterParameters: decodeURI(parameter),
                            onDashboardCommented: "openDashboardComment",
                            onWidgetCommented: "openWidgetComment",
                            onCommentDialogClosing: "closeComment",
                            _itemViewId:"@ViewBag.ViewId",
                            _isPublic : @isPublic,
                            _isUnlisted : @isUnlisted,
                            _unlistedCode : "@unlistedcode",
                            _itemId: "@_itemId",
                            _openShareDialog:"ShareView",
                            allowComment: @enableComment,
                            commentSettings: {
                                isDashboardCommented: @Html.Raw(ViewBag.IsDashboardCommented),
                                widgets: [@Html.Raw(ViewBag.CommentedWidgets)]
                            },
                            favoriteSettings:{
                                enabled:  enableFavoriteSettings,
                                isFavorite:"@(ViewBag.IsFavorite.ToString().ToLower())"=="true",
                            },
                            beforeDashboardIconRendered: "beforeDashboardIconRendered",
                            beforeTabMenuCreate: function(event){
                                var pinIcon = {"id":"pin-parent-dashboard", "text": "[[[Pin Dashboard]]]", "sprite": "su su-pin"};
                                if ($("#is_mobile").val() == "false" && !isSlideshow)
                                {
                                    if (event.model._isPublic == false && event.model._isUnlisted == false){
                                        event.menuData.push(pinIcon);
                                    }
                                    else if ((event.model._isPublic == true || (event.model._isUnlisted && isOwner)) && isUserAuthenticated.toLowerCase()=="true") {
                                        event.menuData.push(pinIcon);
                                    }
                                }
                            },
                            beforeWidgetIconRendered: function (event) {
                                if (isSlideshow) {
                                    event.iconsinformation = [];
                                    event.iconsinformation.length = 0;
                                    return;
                                }

                                if(event.model._isPublic== false && event.model._isUnlisted == false){
                                    if(!event.isFilterWidget){
                                        event.iconsinformation.unshift({ "classname": "su su-pin","name":"Pin Widget","datatooltip":"[[[Pin Widget]]]", "marginright": "-18px", "margintop":"4px"});
                                    }
                                } else if ((event.model._isPublic == true || (event.model._isUnlisted && isOwner)) && isUserAuthenticated.toLowerCase()=="true") {
                                    if(!event.isFilterWidget){
                                        event.iconsinformation.unshift({ "classname": "su su-pin","name":"Pin Widget","datatooltip":"[[[Pin Widget]]]", "marginright": "-18px", "margintop":"4px"});
                                    }
                                }
                            },
                            onMenuIconClick: function(information){
                                if(information.name.toLowerCase() == "pin widget"){
                                    var isWidgetHasMaster = $("#dashboard").data("ejDashboardViewer")._checkIfWidgetHasMasterFilterApplied(information.widgetId);
                                    $("#pin-widget-popup").ejDialog("open");
                                    $("#pin-widget-popup_wrapper").ejWaitingPopup("show");
                                    $("#pin-widget-popup-iframe").attr("src", pinWidgetToHomepageUrl);
                                    $("#pin-widget-popup").attr("data-widget-id",information.widgetId).attr("data-widget-name",information.headertext);
                                    $("#pin-widget-popup").attr("data-tab-id",information.tabId != null ? information.tabId : null);
                                }
                            },
                            onBannerIconClick: function(information){
                                if(information.name.toLowerCase() == "pin dashboard"){
                                    $("#dashboard-homepage-popup").ejDialog("open");
                                    $("#dashboard-homepage-popup_wrapper").ejWaitingPopup("show");
                                    $("#dashboard-homepage-container #homepage-name").val(information.headertext);
                                    $("#filter-info").popover();
                                    $("#dashboard-homepage-popup_wrapper").ejWaitingPopup("hide");
                                }
                                else if (typeof (information.name) != "undefined" && information.name.toLowerCase() == "edit dashboard") {
                                    showEditDashboardWaitingPopup();
                                    var url = encodeURI("@Url.Action("DashboardDesigner", "Designer")" + "/@itemDetail.Id/@itemDetail.CategoryName/@itemDetail.Name");
                                    parent.window.location.href = url;
                                }
                                else if(typeof(information.name)!= "undefined" && information.name.toLowerCase() == "my dashboards"){
                                    var url = encodeURI("@Url.Action("Dashboards", "Dashboards")" + "?view=all");
                                    parent.window.location.href = url;
                                }
                            },
                            onFavoriteStateChange: "updatefavorite",
                            dashboardCreated : "openComments",
                            resizeDashboard :"closeCommentOnResize",
                            filterPanelSettings: {
                                showIcon: false,
                                filterPanelId: "filter-view",
                                showHeader: false
                            },
                            filterOverviewSettings: {
                                showSaveIcon: isSlideshow ? false : ($("#is_mobile").val() == "false" ? viewDetails.CanEdit : false),
                                showSaveAsIcon: isSlideshow ? false : ($("#is_mobile").val() == "false" ? isUserAuthenticated == "true" : false),
                                showViewSavedFilterIcon: !isSlideshow,
                                viewName: viewDetails.ViewName,
                                viewId : "@ViewBag.ViewId"
                            },
                            onSaveFilter: "SaveFilter",
                            onSaveAsFilter: "SaveFilter",
                            onViewSavedFilters: "openViewSection",
                            _exportSettings: {
                                canExportImage: !isSlideshow,
                                canExportPdf: !isSlideshow,
                                canExportExcel: !isSlideshow,
                                canExportCsv: !isSlideshow
                            }
                        });

                        $("#current-view").show();
                        $("#current-view").html("");
                        if (canUpdate) {
                            $("#saved-filter-update").show();
                            $("#update-view").addClass("pointer-events");
                            $("#update-view").css("opacity",0.5);
                        } else {
                            $("#saved-filter-Saveas").show();
                        }
                        $("#save-section").hide();
                        $("#save-lable-section label").html("");

                        link = '<a class="saved-view-link txt-overflow" href="' +
                            pageurl +
                            '?viewid=' +
                            viewId +
                            '" target="_blank" data-toggle="tooltip" data-original-title="' + viewName + '">' +
                            viewName +
                            '</a>';
                        $("#save-lable-section label").append(link);
                        $("#save-lable-section").show();
                        $("#new-save").hide();
                        $("#unsaved-filter,#unsaved-filter-title").show();
                        $('.saved-view[viewid="' + viewId + '"').css("background-color", "#f9f9f9");
                    },
                    error: function () {
                        window.location.href = window.location.href.replace(window.location.search, "");
                    }
                });
            }else {
                $("#dashboard").ejDashboardViewer({
                    accessToken : token,
                    actionBegin: "fnOnDashboardBegin",
                    serviceUrl: "@dashboardServiceUrl",
                    dashboardPath: te,
                    reportName: ReportName,
                    enableDashboardScaling: isSlideshow, // Enable scaling when dashboards rendering from slideshow
                    reportDescription: ReportDescription,
                    showGetLinkIcon: !isSlideshow,
                    enableExport: true,
                    enablePrint: false,
                    enableFilterOverview: !isSlideshow,
                    _selectedTabGuid : childDesignerId,
                    tabActive: function (args) {
                        if (isSlideshow) {
                            return;
                        }

                        $("#dashboard").data("ejDashboardViewer").model.dashboardCreated = "";
                        item_Id = $("#dashboard").data("ejDashboardViewer")._getCurrentDashboardGuid();
                        $("#dashboard_Comment").attr("data-item-id", item_Id);
                        $("#favorite_Item").attr("data-item-id", item_Id);
                        $("#favorite_Item").attr("data-favorite-value", "false");
                        if ($("#comments").hasClass('active')) {
                            var itemId = $("#dashboard_Comment").attr("data-item-id");
                            window.frames[0].GetAllComments(itemId, "dashboard", itemId, "desc", isMultiDashboard);
                        }
                        resetViewPanel();
                        filterView();
                        $.ajax({
                            type: "POST",
                            url: "@Url.Action("GetCommentedWidgets", "DashboardViews")",
                            data: {
                            designerId: item_Id,
                            parentId : $("#favorite_Item").attr("data-parent-id")
                            },
                            success: function(data) {
                                var commentObj = { isDashboardCommented: data.IsDashboardCommented.toLowerCase() == "true", isWidgetCommented: true, widgets: data.Result };
                                if(data.IsDashboardCommented.toLowerCase() == "true")
                                {
                                    parent.$("ul.options li#comments span.su-without-comment").addClass("su-with-comment").removeClass("su-without-comment");
                                }
                                else{
                                    parent.$("ul.options li#comments span.su-with-comment").addClass("su-without-comment").removeClass("su-with-comment");
                                }
                                $("#dashboard").ejDashboardViewer("instance").applyComments(commentObj);
                                $("#dashboard").ejDashboardViewer("instance").option("favoriteSettings.isFavorite", data.IsDashboardFavorite.toLowerCase() == "true");
                                $("#favorite_Item").attr("data-favorite-value", data.IsDashboardFavorite.toLowerCase());
                                $('#dashboard').data("ejDashboardViewer").model.filterOverviewSettings.viewName = null;
                                $('#dashboard').data("ejDashboardViewer").model.filterOverviewSettings.viewId = null;
                            }
                        });

                        var currentUrl = parent.$("#current-url").attr("data-url");
                        var tabName = $("#dashboard").data("ejDashboardViewer").getCurrentTab().tabName;
                        var stateObj = window.top.history.state;
                        if(parent.window.innerWidth >= 1041 && history.pushState != undefined) {
                            if (currentUrl != undefined) {
                                var currentQuery = getQueryWithoutViewCommentTab(parent.window.location.search.substring(1));
                                window.top.history.replaceState(stateObj, "DashboardViewer", parent.window.location.pathname + currentQuery + "&tab=" + tabName);
                            } else {
                                var currentQuery = getQueryWithoutViewCommentTab(window.location.search.substring(1));
                                if(currentQuery === ""){
                                    window.top.history.replaceState(stateObj, "DashboardViewer", window.location.pathname + "?tab=" + tabName);
                                }
                                else{
                                    window.top.history.replaceState(stateObj, "DashboardViewer", window.location.pathname + currentQuery +"&tab=" + tabName);
                                }
                            }
                        }
                    },
                    localeSettings: {
                        resourcePath: "",
                        culture: "@ViewBag.Culture"
                    },
                    interactionSettings: {
                        allowHistoryMaintenance: true,
                        handleHistoryEvent: false
                    },
                    onFilterOverviewUpdated:"onFilterOverviewUpdated",
                    onDashboardCommented: "openDashboardComment",
                    onWidgetCommented: "openWidgetComment",
                    onCommentDialogClosing: "closeComment",
                    _itemViewId: "@ViewBag.ViewId",
                    _isPublic : @isPublic,
                    _isUnlisted : @isUnlisted,
                    _unlistedCode : "@unlistedcode",
                    _itemId: "@_itemId",
                    _openShareDialog:"ShareView",
                    allowComment: @enableComment,
                    commentSettings: {
                        isDashboardCommented: @Html.Raw(ViewBag.IsDashboardCommented),
                        widgets: [@Html.Raw(ViewBag.CommentedWidgets)]
                    },
                    favoriteSettings:{
                        enabled: enableFavoriteSettings,
                        isFavorite:"@(ViewBag.IsFavorite.ToString().ToLower())"=="true",
                    },
                    beforeDashboardIconRendered: "beforeDashboardIconRendered",
                    beforeTabMenuCreate: function(event){
                        var pinIcon = {"id":"pin-parent-dashboard", "text": "[[[Pin Dashboard]]]", "sprite": "su su-pin"};
                        if ($("#is_mobile").val() == "false" && !isSlideshow)
                        {
                            if(event.model._isPublic== false && event.model._isUnlisted == false){
                                event.menuData.push(pinIcon);
                            }
                            else if ((event.model._isPublic == true || (event.model._isUnlisted && isOwner)) && isUserAuthenticated.toLowerCase()=="true") {
                                event.menuData.push(pinIcon);
                            }
                        }
                    },

                    beforeWidgetIconRendered: function(event){
                        if (isSlideshow) {
                            event.iconsinformation = [];
                            event.iconsinformation.length = 0;
                            return;
                        }
                        if ($("#is_mobile").val() == "false" && !isSlideshow) {
                            if(event.model._isPublic== false && event.model._isUnlisted == false){
                                if(!event.isFilterWidget){
                                    event.iconsinformation.unshift({ "classname": "su su-pin","name":"Pin Widget","datatooltip":"[[[Pin Widget]]]", "marginright": "-18px", "margintop":"4px"});
                                }
                            } else if ((event.model._isPublic == true || (event.model._isUnlisted && isOwner)) && isUserAuthenticated.toLowerCase()=="true") {
                                if(!event.isFilterWidget){
                                    event.iconsinformation.unshift({ "classname": "su su-pin","name":"Pin Widget","datatooltip":"[[[Pin Widget]]]", "marginright": "-18px", "margintop":"4px"});
                                }
                            }
                        }
                    },
                    onMenuIconClick: function(information){
                        if(information.name.toLowerCase() == "pin widget"){
                            var isWidgetHasMaster = $("#dashboard").data("ejDashboardViewer")._checkIfWidgetHasMasterFilterApplied(information.widgetId);
                            $("#pin-widget-popup").ejDialog("open");
                            $("#pin-widget-popup_wrapper").ejWaitingPopup("show");
                            $("#pin-widget-popup-iframe").attr("src", pinWidgetToHomepageUrl);
                            $("#pin-widget-popup").attr("data-widget-id",information.widgetId).attr("data-widget-name",information.headertext);
                            $("#pin-widget-popup").attr("data-tab-id",information.tabId != null ? information.tabId : null);
                        }
                    },
                    onBannerIconClick: function(information){
                        if (information.name.toLowerCase() == "pin dashboard") {
                            $("#dashboard-homepage-popup").ejDialog("open");
                            $("#dashboard-homepage-popup_wrapper").ejWaitingPopup("show");
                            $("#dashboard-homepage-container #homepage-name").val(information.headertext);
                            $("#dashboard-homepage-container #filter-info").popover();
                            $("#dashboard-homepage-popup_wrapper").ejWaitingPopup("hide");
                        }
                        else if (typeof (information.name) != "undefined" && information.name.toLowerCase() == "edit dashboard") {
                            var url = encodeURI("@Url.Action("DashboardDesigner", "Designer")" + "/@itemDetail.Id/@itemDetail.CategoryName/@itemDetail.Name");
                            if (isNewViewerModel.toLowerCase() == "true") {
                                parent.messageBox("su-edit", "[[[Edit Dashboard]]]", "[[[Editing this dashboard will upgrade it to a newer format which is currently not compatible with the following scenarios:]]]<br/><ul class='message-content'><li>[[[Embedding dashboards using Dashboard Platform SDK]]]</li><li>[[[Sending data alerts]]]</li><li>[[[Pinning dashboards/widgets]]]</li></ul>[[[Do you want to continue?]]]", "error", function () {
                                    parent.window.location.href = url;
                                }, undefined, "auto", "auto", undefined, "upgrade_dashboard_sydj");
                            }
                            else {
                                parent.window.location.href = url;
                            }
                        }
                        else if(typeof(information.name)!= "undefined" && information.name.toLowerCase() == "my dashboards"){
                            var url = encodeURI("@Url.Action("Dashboards", "Dashboards")" + "?view=all");
                            parent.window.location.href = url;
                        }
                    },
                    onFavoriteStateChange: "updatefavorite",
                    dashboardCreated : "openComments",
                    resizeDashboard :"closeCommentOnResize",
                    filterPanelSettings: {
                        showIcon: false,
                        filterPanelId: "filter-view",
                        showHeader: false
                    },
                    filterOverviewSettings: {
                        showSaveIcon: $("#is_mobile").val() == "false" ? isUserAuthenticated == "true" : false,
                        showSaveAsIcon: $("#is_mobile").val() == "false" ? isUserAuthenticated == "true" : false,
                        showViewSavedFilterIcon: true,
                        viewName: null,
                        viewId : null
                    },
                    onSaveFilter: "SaveFilter",
                    onSaveAsFilter: "SaveFilter",
                    onViewSavedFilters: "openViewSection",
                    _exportSettings: {
                        canExportImage: !isSlideshow,
                        canExportPdf: !isSlideshow,
                        canExportExcel: !isSlideshow,
                        canExportCsv: !isSlideshow
                    }
                });
            }
        }
        setWidth();
        if(iframeUrl !== parentUrl) {
            var obj = $("#dashboard").ejDashboardViewer("instance");
            obj.model.interactionSettings.allowHistoryMaintenance = false;
            obj.model.interactionSettings.handleHistoryEvent = false;
        }
    });

    $(document).on("click", ".close-div", function () {
        parent.$('#warning-alert').fadeOut();
    });

    function setWidth() {
        if (isSlideshow) {
            $("#dashboard").css("width", $(window).width() + "px");
        } else {
            $("#dashboard").css("width", $(window).width() - 40 + "px");
            if ($("#comments, #filters, #views").hasClass('active')) {
                $("#dashboard").css("width", $(window).width() - 450 + "px");
            }
        }
    }

    function applyFilter() {
        var url = window.parent.location.search;
        var tabName = getUrlQueryVariable(url,"tab");
        if (tabName != undefined && tabName != "") {
            $("#dashboard").data("ejDashboardViewer").selectTabByName(decodeURI(tabName));
        } else if (isMultiDashboard.toLowerCase() === "true"){
            $("#dashboard").data("ejDashboardViewer").selectTabByIndex(0);
        }

        var stateObj = window.top.history.state;
        if (stateObj != undefined && JSON.stringify(stateObj) !== JSON.stringify({})) {
            var currentViewId = JSON.parse(stateObj)['sync-dbrd-key'];
            if (currentViewId != undefined && currentViewId != "") {
                $("#dashboard").data("ejDashboardViewer").loadHistoryData(currentViewId);
            }
        }
    }

    function beforeDashboardIconRendered(args){
        if(!ej.isNullOrUndefined(args) && !ej.isNullOrUndefined(args.iconsinformation)) {
            var index = null;
            for(var i=0; i < args.iconsinformation.length; i++) {
                if(args.iconsinformation[i].name === "comment") {
                    index = i;
                    break;
                }
            }
            if(!ej.isNullOrUndefined(index)) {
                args.iconsinformation.splice(index, 1);
            }
        }

        if ($("#is_mobile").val() == "false") {
            if (!isSlideshow) {
                args.iconsinformation.unshift({ "classname": "su su-maximize-1 icon tv-mode-icon", "name": "Fullscreen", "datatooltip": "[[[Fullscreen]]]", "margintop": "14px" });
                if (args.model._isPublic == false && args.model._isUnlisted == false) {
                    args.iconsinformation.push({ "classname": "su su-pin", "name": "Pin Dashboard", "datatooltip": "[[[Pin Dashboard]]]", "margintop": "14px" });
                } else if ((args.model._isPublic == true || (args.model._isUnlisted && isOwner)) && isUserAuthenticated.toLowerCase() == "true") {
                    args.iconsinformation.push({ "classname": "su su-pin", "name": "Pin Dashboard", "datatooltip": "[[[Pin Dashboard]]]", "margintop": "14px" });
                }
            }
            if (isUserAuthenticated.toLowerCase() == "true" && canEdit.toLowerCase() == "true" && !isSlideshow) {
                args.iconsinformation.push({ "classname": "su su-edit icon", "name": "Edit Dashboard", "datatooltip": "[[[Edit Dashboard]]]", "margintop": "14px", "marginright": "25px" });
            }
            if (isUserAuthenticated.toLowerCase() == "true" && showMyDashboards.toLowerCase() == "true") {
                args.iconsinformation.push({ "classname": "e-dbrd-banner-text-icon", "content": "My Dashboards", "name": "My Dashboards", "datatooltip": "[[[My Dashboards]]]", "margintop": "8px", "marginright": "12px" });
            }
        }
    }

    function beforeBannerIconRender(args) {
        if ($("#is_mobile").val() == "false") {
            if (!isSlideshow) {
                args.iconsinformation.unshift({ "class": "su su-maximize-1 icon tv-mode-icon e-dashboard-banner-icon e-dbrd-designer-hoverable", "name": "Fullscreen", "tooltip": "[[[Fullscreen]]]" });

                if (isUserAuthenticated.toLowerCase() == "true" && canEdit.toLowerCase() == "true") {
                    args.iconsinformation.push({ "class": "e-dashboard-banner-icon su su-edit icon e-dbrd-designer-hoverable", "name": "Edit Dashboard", "tooltip": "[[[Edit dashboard]]]" });
                }
                if (isUserAuthenticated.toLowerCase() == "true" && showMyDashboards.toLowerCase() == "true") {
                    args.iconsinformation.push({ "class": "e-dashboard-banner-icon e-dbrd-banner-text-icon e-dbrd-designer-hoverable my-dashboards-banner-icon", "content": "My Dashboards", "name": "My Dashboards", "tooltip": "[[[My Dashboards]]]" });
                }
            }
        }
    }
    function getUrlQueryVariable(url, variable) {
        var query = url.substring(url.indexOf('?') + 1);
        var vars = query.split("&");
        for (var i = 0; i < vars.length; i++) {
            var pair = vars[i].split("=");
            if (pair[0] == variable) { return pair[1]; }
        }
        return null;
    }

    function getQueryWithoutViewCommentTab(queryString) {
        var returnString = '', queries, temp, i, l;
        if (queryString !== "") {
            queries = queryString.split("&");
            for (i = 0, l = queries.length; i < l; i++) {
                temp = queries[i].split('=');
                if (temp[0].toLowerCase() !== "tab" && temp[0].toLowerCase() !== "viewid" && temp[0].toLowerCase() !== "comment" && temp[0] !== "filterQuery") {
                    returnString += (returnString === '' ? '?' : '&') + queries[i];
                }
            }
        }
        return returnString;
    }

    function RefreshDashobardData() {
        $('#dashboard').data("ejDashboardViewer").refreshData();
    }

    function showEditDashboardWaitingPopup(){
        $("body").ejWaitingPopup({ text: 'Preparing the dashboard to edit' }).ejWaitingPopup("show");
        var loaderEle = $("#body-loader-icon");
        $("#body-loader-icon").css("top", "39%");
        loaderEle.siblings("div.e-text").css("top", "39%").css("margin-top", "30px").css("font-size", "21px").css("font-family", "Roboto");
        $("#body_WaitingPopup").addClass("bg-color-white").css("opacity", "1");;     
    }   
</script>