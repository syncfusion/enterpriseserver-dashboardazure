@{
    Layout = null;
    ViewBag.Title = ViewBag.ItemName + " - [[[View Widget]]] -" + GlobalAppSettings.SystemSettings.OrganizationName;
    var baseUrl = ViewBag.BaseUrl;
    var dashboardServiceUrl = GlobalAppSettings.SystemSettings.DashboardServiceUrl;
    var itemLocation = ViewBag.ItemLocation as string;
    itemLocation = itemLocation != null ? itemLocation.Replace("\\", "\\\\") : string.Empty;
    var enableComment = "true";
    ItemDetail itemDetail = ViewBag.itemDetail;
    var isUserAuthenticated = "false";
    var isPublic = GlobalAppSettings.SystemSettings.IsMarkItemsPublic && itemDetail.IsPublic ? "true" : "false";
    ViewBag.DateFormat = GlobalAppSettings.SystemSettings.DateFormat;
    ViewBag.TimeFormat = GlobalAppSettings.SystemSettings.TimeFormat ? "HH:mm" : "hh:mm tt";
    var accessToken = ViewBag.accessToken;
    var externalLogin = Request["externallogin"];
    var hasSSO = Request["hassso"];
    var IsMarkItemsPublic = GlobalAppSettings.SystemSettings.IsMarkItemsPublic ? "true" : "false";
    var IsItemPublic = itemDetail.IsPublic ? "true" : "false";
    var itemType = itemDetail.ItemType.ToString().ToLower();
    var publicItemSetttingOffWithoutLoginAndWithOutAccess = (int)ErrorCode.PublicItemSetttingOffWithoutLoginAndWithOutAccess;
    var privateItemSetttingOnWithoutLoginAndWithOutAccessForWinAuth = (int)ErrorCode.PrivateItemSetttingOnWithoutLoginAndWithOutAccessForWinAuth;
    var privateItemSetttingOffWithoutLoginAndWithOutAccessForWinAuth = (int)ErrorCode.PrivateItemSetttingOffWithoutLoginAndWithOutAccessForWinAuth;
    var publicItemSetttingOffWithLoginAndWithOutAccess = (int)ErrorCode.PublicItemSetttingOffWithLoginAndWithOutAccess;
    var privateItemSetttingOnWithoutLoginAndWithOutAccessForWinADAuth = (int)ErrorCode.PrivateItemSetttingOnWithoutLoginAndWithOutAccessForWinADAuth;
    var privateItemSetttingOnWithoutLoginAndWithOutAccessForAzureADAuth = (int)ErrorCode.PrivateItemSetttingOnWithoutLoginAndWithOutAccessForAzureADAuth;
    var privateItemSetttingOnWithLoginAndWithOutAccess = (int)ErrorCode.PrivateItemSetttingOnWithLoginAndWithOutAccess;
    var privateItemSetttingOffWithoutLoginAndWithOutAccessForWinADAuth = (int)ErrorCode.PrivateItemSetttingOffWithoutLoginAndWithOutAccessForWinADAuth;
    var privateItemSetttingOffWithoutLoginAndWithOutAccessForAzureADAuth = (int)ErrorCode.PrivateItemSetttingOffWithoutLoginAndWithOutAccessForAzureADAuth;
    var privateItemSetttingOffWithLoginAndWithOutAccess = (int)ErrorCode.PrivateItemSetttingOffWithLoginAndWithOutAccess;
	var isUnlisted = itemDetail.IsUnlisted ? "true" : "false";
    var unlistedcode = itemDetail.UnlistedCode;
}
<!DOCTYPE html>

<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    @if (GlobalAppSettings.SystemSettings.StorageType == (int)StorageType.AzureBlob)
    {
        <link rel="icon" href="@GlobalAppSettings.AzureBlob.AzureBlobStorageUri/@GlobalAppSettings.AzureBlob.AzureBlobStorageContainerName/@GlobalAppSettings.GetStorageMode()/Content/Images/Application/@GlobalAppSettings.SystemSettings.FavIcon" onerror="if (this.href != '~/Content/Images/Application/Favicon.png') this.href = '~/Content/Images/Application/Favicon.png';" />
    }
    else
    {
        <link rel="icon" href="~/Content/Images/Application/@GlobalAppSettings.SystemSettings.FavIcon" onerror="if (this.href != '~/Content/Images/Application/Favicon.png') this.href = '~/Content/Images/Application/Favicon.png';" />
    }

    <title>@ViewBag.Title</title>
    @Styles.Render("~/styles/file-render-ej", DeviceDetection.IsMobile ? "~/styles/file-render-dashboard-mobile" : "~/styles/file-render-dashboard")
    <style>
        html {
            height: 100%;
        }

        #widget_WaitingPopup {
            height: 100% !important;
            width: 100% !important;
            background-color: #fff !important;
        }

            #widget_WaitingPopup .e-image {
                background: url('@Url.Content("~/Content/Images/waitingpopup.gif")') no-repeat scroll 0px 18px transparent;
                top: 350px !important;
            }

        #custom-errors-embed-dashboard
         {
            font-family: RobotoRegular;
            margin-left: 30px;
            margin-right: 30px;
            margin-top: 50px;
        }
        h2{
            border-bottom: 1px solid #e2e2e2;
            font-size: 30px;
            font-weight: 500;
            padding-bottom: 15px;
        }
        #ul-solution li{
            margin: 10px;
        }
        #ul-possible li{
            margin: 10px;
        }

    </style>
    <script>
        var pinWidgetToHomepageUrl = "@Url.Action("PinWidgetToHomepage", "Homepages")";
        var embeddedLoginUrl = "@Url.Action("EmbeddedLogin", "Accounts")";
        var embeddedLogoutUrl = "@Url.Action("EmbeddedLogout","Accounts")";
        var externalLogin = "@externalLogin";
        var sso = "@hasSSO";
        var canRead = "@ViewBag.CanRead";
        var comment = "";
		var isUnlisted = @itemDetail.IsUnlisted.ToString().ToLower();
        var unlistedCode = "@itemDetail.UnlistedCode";
        var isSlideshow = false;
		window.destroyAll = function () { try { ej.widget.destroyAll($('.e-js').off()); } catch (e) { } $(document.body).html('-'); CollectGarbage(); };
        function loadPopup(){
            $("#widget").ejWaitingPopup();
            $("#widget").ejWaitingPopup("show");
            window.location.href = window.location.href.replace(window.location.pathname + window.location.search, "");
        }
        var publicItemSetttingOffWithoutLoginAndWithOutAccess = @publicItemSetttingOffWithoutLoginAndWithOutAccess;
        var privateItemSetttingOnWithoutLoginAndWithOutAccessForWinAuth = @privateItemSetttingOnWithoutLoginAndWithOutAccessForWinAuth;
        var privateItemSetttingOffWithoutLoginAndWithOutAccessForWinAuth = @privateItemSetttingOffWithoutLoginAndWithOutAccessForWinAuth;
        var publicItemSetttingOffWithLoginAndWithOutAccess = @publicItemSetttingOffWithLoginAndWithOutAccess;
        var privateItemSetttingOnWithoutLoginAndWithOutAccessForWinADAuth = @privateItemSetttingOnWithoutLoginAndWithOutAccessForWinADAuth;
        var privateItemSetttingOnWithoutLoginAndWithOutAccessForAzureADAuth = @privateItemSetttingOnWithoutLoginAndWithOutAccessForAzureADAuth;
        var privateItemSetttingOnWithLoginAndWithOutAccess = @privateItemSetttingOnWithLoginAndWithOutAccess;
        var privateItemSetttingOffWithoutLoginAndWithOutAccessForWinADAuth = @privateItemSetttingOffWithoutLoginAndWithOutAccessForWinADAuth;
        var privateItemSetttingOffWithoutLoginAndWithOutAccessForAzureADAuth = @privateItemSetttingOffWithoutLoginAndWithOutAccessForAzureADAuth;
        var privateItemSetttingOffWithLoginAndWithOutAccess = @privateItemSetttingOffWithLoginAndWithOutAccess;
    </script>
    @Scripts.Render(DeviceDetection.IsMobile ? "~/scripts/widget-render-mobile" : "~/scripts/widget-render", "~/scripts/dashboard-render-ejviewer", "~/scripts/dashboard-render-ejvisualizationcontrols", "~/scripts/dashboard-render-ejchart", "~/scripts/embed-dashboards")

    @{
        if (HttpContext.Current.Request.QueryString["hascomments"] != null && HttpContext.Current.Request.QueryString["hascomments"].ToLower() == "true")
        {
            enableComment = "true";
        }
        else
        {
            enableComment = "false";
        }
    }
        <script>
        function CommentImageDialogClose() {
            $("#commentImage_popup").ejDialog("close");
            $("#commentImage_popup_image").attr('src', "");
        }
    </script>
</head>

<body style="width: 100%; height: 100%;">
    @Html.Partial("../Home/PublicEmbedDashboardViewDenied")
    <div id="widget" style="width: 100%; height: 100%;"></div>

    @if (DeviceDetection.IsMobile)
    {
        <script>
            $(document)
               .ready(function() {
                   if("@enableComment" == "false"){
                       $("#comment-li").html("");
                       $(".navbar-nav li").removeClass("col-xs-4").addClass("col-xs-6");
                   }
               });
        </script>
        <nav id="server-mobile-navbar" class="navbar navbar-inverse">
            <div class="container-fluid">
                <ul class="nav navbar-nav col-xs-12 no-padding no-margin">
                    <li class="col-xs-4">
                        <a href="@Url.Action(" Widgets", "Widgets" )" class="su su-nav-home" onclick="loadPopup();"></a>
                    </li>
                    <li class="col-xs-4">
                        <a href="javascript:void(0)" class="su su-nav-widgets active"></a>
                    </li>
                    <li class="col-xs-4" id="comment-li">
                        @if (ViewBag.isWidgetCommented == "true")
                        {
                            <a href="javascript:void(0)" class="su su-with-comment server-comment"></a>
                        }
                        else
                        {
                            <a href="javascript:void(0)" class="su su-without-comment server-comment"></a>
                        }
                    </li>
                </ul>
            </div>
        </nav>
    }

    <input id="comment_Type" type="hidden" data-item-type="individual-widget">
    <input id="isMultiDashboard" type="hidden" data-item-id="false">
    <input id="widget_Comment" class="displayNone" data-item-id="@ViewBag.ItemId">
    <input id="dashboard_Comment" class="displayNone" data-item-id="@Guid.Empty">
    <input id="is_mobile" type="hidden" value="@DeviceDetection.IsMobile.ToString().ToLower()">
    <div id="custom-errors-embed-dashboard" style="display:none">
        <h2 id="header"></h2>
        <h4>[[[Possible cause:]]]</h4>
        <ul id="ul-possible"></ul>
        <h4>[[[Solutions:]]]</h4>
        <ul id="ul-solution"></ul>
    </div>
    <div id="commentModuleContainer" class="displayNone" style="background-image: url('@Url.Content("~/Content/Images/waitingpopup.gif")');background-color: #fff; background-repeat: no-repeat; background-position: 50% 50%;">
        <iframe id="commentModuleContainer_iframe" class="comment-popup-frame" src="@Url.Action("IndividualWidgetCommentPartialView", "Comments" )?itemId=@ViewBag.ItemId" style="height: 100%; width: 100%; "></iframe>
    </div>

    <iframe id="delete_popup_iframe" class="comment-popup-frame displayNone" src="@Url.Action("CommentDeletePartialView", "Comments" )" allowtransparency="true" style="position: absolute;"></iframe>

    <div id="commentImage_popup" class="col-md-12 no-padding hidden">
        <div class="col-lg-12 no-padding" id="PopupContainer">
            <div class="col-md-12">
                <div class="col-xs-12 no-padding" style="float:right">
                    <a href="javascript:void(0);" onclick="CommentImageDialogClose()" class="PopupClose"><span class="su su-close"></span></a>
                </div>
            </div>
            <div class="dialogBody col-xs-12 no-padding">
                <img id="commentImage_popup_image" src="" style="width: 100%;">
            </div>
        </div>
    </div>

    <div id="pin-widget-popup" data-widget-id="" data-widget-name="">
        <iframe id="pin-widget-popup-iframe" class="" style="height: 100%; width: 100%;"></iframe>
    </div>
    <div id="success-alert">
        <div id="image-container">
            <div class="image-holder">
                <span class="su su-tick" alt="Success Icon"></span>
            </div>
        </div>
        <div id="message">
            <h1 id="message-header"></h1>
            <span id="message-content"></span>
        </div>
        <div class="close-div">
            <span id="close-content">[[[Close]]]</span>
    </div>
    </div>
    <div id="warning-alert">
        <div id="image-container">
            <span class="su su-warning-alt" alt="Warning Icon"></span>
        </div>
        <div id="message">
            <h1 id="message-header"></h1>
            <span id="message-content"></span>
        </div>
        <div class="close-div">
            <span id="close-content">[[[Close]]]</span>
        </div>
    </div>

</body>
@if (HttpContext.Current.Request.IsAuthenticated)
{
    isUserAuthenticated = "true";
}
else
{
    isUserAuthenticated = "false";
}
@if (!HttpContext.Current.Request.IsAuthenticated)
{
    <script>
            $(document).ready(function () {
                if (externalLogin != null && externalLogin.toLowerCase() == "windowsad" && sso != null && sso.toLowerCase() == "true") {
                    $.ajax({
                        type: "GET",
                        url: "@baseUrl"+"/windowsauthentication/account/login",
                        data: { },
                        cache: false,
                        contentType: "application/json; charset=utf-8",
                        statusCode: {
                            200: function(result) {
                                if (result.Success == true) {
                                    window.location.href = window.location.href;
                                } else {
                                    $(".error-message").css("display", "block");
                                }
                            },
                        },
                        dataType: "json",
                        success: function(result) { },
                        error :  function(result) { }
                  });
                }
            });
    </script>
}
else
{
    <script>
            $(document).ready(function () {
                if (externalLogin != "" && externalLogin.toLowerCase() == "windowsad") {
                        if(@isPublic == true || @isUnlisted == true){
                                        enableComment = "false";
                                        enableView = "false";
                                        renderDashboard(comment,view);
                        }
                        else if(canRead.toLowerCase() == "true")
                        {
                            enableComment = "false";
                            enableView = "false";
                            renderDashboard(comment,view);
                        }
                        else if(@IsMarkItemsPublic == false && @IsItemPublic == true && canRead.toLowerCase() == "false" && isUnlisted != true)
                        {
                            CustomErrorMessage(@publicItemSetttingOffWithoutLoginAndWithOutAccess,"@itemType");
                        }
                        else if(@IsMarkItemsPublic == true && @IsItemPublic == false && canRead.toLowerCase() == "false"&& isUnlisted != true)
                        {
                            CustomErrorMessage(@privateItemSetttingOnWithoutLoginAndWithOutAccessForWinAuth, "@itemType");
                        }
                        else if(@IsMarkItemsPublic == false && @IsItemPublic == false && canRead.toLowerCase() == "false")
                        {
                            CustomErrorMessage(@privateItemSetttingOffWithoutLoginAndWithOutAccessForWinAuth, "@itemType" && isUnlisted != true);
                        }
                        else{
                            window.location.href = "@baseUrl"+"/login";
                        }
                    }
            });
    </script>
}
<script type="text/javascript">
    var token ="@accessToken";
    var isUserAuthenticated = "@isUserAuthenticated";
    var parentRefUrl = (window.location != window.parent.location) ? document.referrer : document.location.href.replace(document.location.pathname + document.location.search, "");
    if(parentRefUrl == ""){
        var parentUrl = "";
    }
    else {
        var parentUrl = parentRefUrl.match(/:\/\/(.[^/]+)/)[1];
    }
    var iframeRefUrl=window.location.href;
    var iframeUrl=iframeRefUrl.match(/:\/\/(.[^/]+)/)[1];
    $(document).ready(function () {
		 window.addEventListener('message', receiveMessage, false);
		 function receiveMessage(event) {
		     var comment = "";
            if (event.data) {
                var messageData = JSON.parse(event.data);
                if(messageData["access_token"] != ""){
                    token = messageData["access_token"];
                    var te = "@Html.Raw(itemLocation)";
                    $.ajax({
                        type: "POST",
                        url: embeddedLoginUrl,
                        data: {
                            token:token,
                            itemPath:te
                        },
                        success: function(obj) {
                            if(obj.data != null && obj.data.Status == true){
                            userId = obj.data.UserId;
                            userName = obj.data.UserName;
                            var iframeUrl = iframeRefUrl.substring(iframeRefUrl.indexOf('?')+1,iframeRefUrl.length);
                            comment = iframeUrl.substring(iframeUrl.indexOf('=')+1,iframeUrl.indexOf('&'));
                            if($("#widget").data("ejDashboardViewer") != null){
                                if($("#widget").data("ejDashboardViewer").model.allowComment == false && comment == "true"){
                                    $("#widget").data("ejDashboardViewer")._setModel({"allowComment":(comment == "true")? true:false});
                                    $("#commentModuleContainer_iframe").attr("src","@Url.Action("IndividualWidgetCommentPartialView", "Comments" )?itemId=@ViewBag.ItemId");
                                }
                            }
                            else{

                            renderWidget(comment);
                            $("#widget").data("ejDashboardViewer").model.accessToken = token;
							}
						    }
						    else
						    {
						        if(@isPublic == true || @isUnlisted == true && isUserAuthenticated.toLowerCase() == "false"){
						            renderWidget(comment);
						        } else {
						            CustomErrorMessage(obj.data.ErrorCode, "@itemType");
						        }
							}
                        }
                    });
                }
                else{
                    token = token;
                    }
                 }
			else {
                if(@IsMarkItemsPublic == false && @IsItemPublic == true && isUnlisted != true)
                {
                    CustomErrorMessage(@publicItemSetttingOffWithoutLoginAndWithOutAccess, "@itemType");
                }
                else if(@IsMarkItemsPublic == true && @IsItemPublic == false && isUnlisted != true)
                {
                    CustomErrorMessage(@privateItemSetttingOnWithoutLoginAndWithOutAccessForWinAuth, "@itemType");
                }
                else if(@IsMarkItemsPublic == false && @IsItemPublic == false && isUnlisted != true)
                {
                    CustomErrorMessage(@privateItemSetttingOffWithoutLoginAndWithOutAccessForWinAuth, "@itemType");
                }
            }
        }
        if (externalLogin != null && externalLogin.toLowerCase() == "azuread" && sso != null && sso.toLowerCase() == "true")
        {
            if (isUserAuthenticated.toLowerCase() == "true"){
                if(@IsMarkItemsPublic == false && @IsItemPublic == true && canRead.toLowerCase() == "false"&& isUnlisted != true)
                {
                    CustomErrorMessage(@publicItemSetttingOffWithoutLoginAndWithOutAccess,"@itemType");
                }
                else if(@IsMarkItemsPublic == true && @IsItemPublic == false && canRead.toLowerCase() == "false"&& isUnlisted != true)
                {
                    CustomErrorMessage(@privateItemSetttingOnWithoutLoginAndWithOutAccessForWinAuth, "@itemType");
                }
                else if(@IsMarkItemsPublic == false && @IsItemPublic == false && canRead.toLowerCase() == "false"&& isUnlisted != true)
                {
                    CustomErrorMessage(@privateItemSetttingOffWithoutLoginAndWithOutAccessForWinAuth, "@itemType");
                }
                else {
                    renderWidget(comment);
                }
            }
            else{
                if (@isPublic == true || @isUnlisted == true) {
                    renderWidget(comment);
                }
                else{
                    window.location.href = "@baseUrl"+"/login";
                }
            }
        }
        if(sso.toLowerCase() == "false" && sso != null){
            if (isUserAuthenticated.toLowerCase() == "true"){
                renderWidget(comment);
            }
            else{
                if(@isPublic || @isUnlisted == true && isUserAuthenticated.toLowerCase() == "false"){
                    renderWidget(comment);
                }
            }
        }
        $(document).on("click", ".close-div", function () {
            (iframeUrl == parentUrl) ? parent.$('#warning-alert').fadeOut() : $('#warning-alert').fadeOut();
        });
    });
    function renderWidget(comment)
    {
        var te = "@Html.Raw(itemLocation)";
        var ReportName = "@ViewBag.ItemName";
        var ReportDescription = "@ViewBag.ItemDescription";
        var widgetId = "@ViewBag.ItemId";
        var commentShow = "";
        var authentication = "@isUserAuthenticated";
        if(authentication.toLowerCase() == "true" && comment == ""){
		commentShow = @enableComment;
		}
		else if(comment != ""){
		commentShow = (comment == "true") ? true :false;
        }
        else{
            commentShow = false;
        }

        $("#pin-widget-popup").ejDialog({
            width: "400px",
            height: "310px",
            showOnInit: false,
            allowDraggable: true,
            enableResize: false,
            title: "[[[Pin Item to the Homepage]]]",
            enableModal: true,
            showHeader: false
        });
        $("#pin-widget-popup_wrapper").ejWaitingPopup();


        $("#widget").ejDashboardViewer({
            accessToken : token,
            serviceUrl: "@dashboardServiceUrl",
            dashboardPath: te,
            reportName: ReportName,
            reportDescription: ReportDescription,
            enableExport: true,
            enablePrint: false,
            localeSettings: {
                resourcePath: "",
                culture: "@ViewBag.Culture"
            },
            filterParameters: "@Html.Raw(ViewBag.FilterQuery)",
            onWidgetCommented: "openWidgetComment",
            onCommentDialogClosing: "closeWidgetComment",
            _itemId:"@ViewBag.ItemId",
            _isPublic : @isPublic,
			_isUnlisted : @isUnlisted,
            _unlistedCode : "@unlistedcode",
            allowComment: commentShow,
            commentSettings:{
                isWidgetCommented: @Html.Raw(ViewBag.isWidgetCommented),
            },
            onMenuIconClick: function(information){
                if(information.name == "Pin Widget"){
                    $("#pin-widget-popup").ejDialog("open");
                    $("#pin-widget-popup_wrapper").ejWaitingPopup("show");
                    $("#pin-widget-popup-iframe").attr("src", pinWidgetToHomepageUrl);
                    $("#pin-widget-popup").attr("data-widget-id", widgetId).attr("data-widget-name",information.headertext);
                }
            },
            dashboardCreated : "openComments",
            resizeDashboard :"closeCommentOnResize"
        });
    }
</script>